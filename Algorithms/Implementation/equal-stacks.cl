;https://www.hackerrank.com/challenges/equal-stacks
(defun is-space(e)
  (equal e #\Space)
  )

(defun read-stack(size str)
  (do* ((lst (make-array (1+ size)))
        pos0
        (pos1 nil)
        (index 1 (1+ index))
        nmbr
        (sum 0)
        )
    ((> index size) (setf (aref lst 0) 0) lst)
    (setf pos0 (position-if #'is-space str :end pos1 :from-end t))
    (if (null pos0) (setf pos0 0))
    (setf nmbr (parse-integer (subseq str pos0 pos1)))
    (setf (svref lst index) (incf sum nmbr))
    (setf pos1  pos0)
    )
  )

(defun parse-3-str(str)
  (let (n1 n2 n3 (pos0 0) pos1)
    (setf pos1 (position-if #'is-space str))
    (setf n1 (parse-integer (subseq str pos0 pos1)))

    (setf pos0 (1+ pos1))
    (setf pos1 (position-if #'is-space str :start pos0))
    (setf n2 (parse-integer (subseq str pos0 pos1)))

    (setf n3 (parse-integer (subseq str (1+ pos1))))
    (list n1 n2 n3)
    )
  )

(destructuring-bind (n1 n2 n3) (parse-3-str "5 3 4");(read-line))
  (let* ((stck1 (read-stack n1 "3 2 1 1 1"));(read-line)))
        (stck2 (read-stack n2 "4 3 2"));(read-line)))
        (stck3 (read-stack n3 "1 1 4 1"));(read-line)))
        ;(height (car (reduce #'intersection (list stck1 stck2 stck3))))
        )
    (do* 
          ((index1 n1)
           (index2 n2)
           (index3 n3)
           (el1 (svref stck1 index1) (svref stck1 index1))
           (el2 (svref stck2 index2) (svref stck2 index2))
           (el3 (svref stck3 index3) (svref stck3 index3))
           )
          ((= el1 el2 el3) (format t "~&~A" el1))
          (cond
            ((OR (zerop index1) (zerop index2) (zerop index3))
             (setf index1 0)
             (setf index2 0)
             (setf index3 0)
             )
            ((OR (> el1 el2) (> el1 el3)) (decf index1))
            ((OR (> el2 el1) (> el2 el3)) (decf index2))
            (t (decf index3))
          )
          )
    )
  )

