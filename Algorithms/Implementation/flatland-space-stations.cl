;https://www.hackerrank.com/challenges/flatland-space-stations
(defun is-space(e) 
  (equal e #\Space))

(defun parse-n-m(str)
  (let* ((pos (position-if #'is-space str))
         (n (parse-integer (subseq str 0 pos)))
         (m (parse-integer (subseq str (1+ pos))))
         )
    (list n m)))

(destructuring-bind (n m) (parse-n-m (read-line))
  (let* ((arr (make-array n :initial-element 0)))
    (do* ((index 0 (1+ index))
          (str (read-line))
          (pos0 0)
          pos1
          )
      ((equal index m))
      (setf pos1 (position-if #'is-space str :start pos0))
      (setf (svref arr (parse-integer (subseq str pos0 pos1))) 1)
      (unless (null pos1) (setf pos0 (1+ pos1)))
      )
    (do* ((index 0 (1+ index))
          (minn 0)
          (maxx 0)
          (frst t)
          )
        ((equal index n) (when (> (* 2  minn) maxx) (setf maxx (* 2 minn))) (multiple-value-bind (mm tt) (floor (1+ maxx) 2) (format t "~&~A" mm)) )
        (cond ((zerop (svref arr index)) (incf minn (if frst 2 1)))
              (t (when (> minn maxx) (setf maxx minn))
                 (setf minn 0)
                 (setf frst nil)
                 )
              )
        (format t "~&~A ~A" minn maxx)
        )
    )
  )
